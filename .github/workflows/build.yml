name: Docker Official Images JSON Builder

on: 
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
    tags:
      - 'latest'
  release:
    types: published
  schedule:
    # 4am every Saturday
    - cron: '0 4 * * 6'

jobs:
  get-latest-commit:
    runs-on: ubuntu-latest
    outputs:
      new-commit: ${{ steps.compare-sha.outputs.NEWCOMMIT }}
    steps:       
      - name: Get latest commit SHA
        id: get-latest-sha
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_ACTIONS }}
          result-encoding: string
          script: |
            const commits = await github.rest.repos.listCommits({
              owner: 'docker-library',
              repo: 'official-images'
            });
            return commits.data[0].sha;

      - name: Compare SHAs
        id: compare-sha
        run: |
          echo Archived SHA: ${ARCHIVEDSHA}
          echo Latest SHA:   ${LATESTSHA}
          if [[ $ARCHIVEDSHA == $LATESTSHA ]]; then 
            NEWCOMMIT=false
            
          else
            NEWCOMMIT=true
          fi

          echo "NEWCOMMIT=$NEWCOMMIT" >> $GITHUB_OUTPUT
          echo "NEWCOMMIT=$NEWCOMMIT"
        env:
          ARCHIVEDSHA: ${{ vars.DOCKER_LIBRARY_SHA }}
          LATESTSHA: ${{ steps.get-latest-sha.outputs.result }}
      
    
  get-image-names:
    if: github.ref == '00000'
    runs-on: ubuntu-latest
    outputs:
      image-list: ${{ steps.build-image-list.outputs.IMAGE_LIST }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: docker-library/official-images
          sparse-checkout: library/
      
      - name: Build image list
        id: build-image-list
        working-directory: ./library
        run: |
          LS=$(ls | jq -cRsa 'split("\n")[:-1]')
          echo "IMAGE_LIST=$LS" >> $GITHUB_OUTPUT
          jq . <<< "$LS"

  build-json-files:
    if: needs.get-latest-commit.outputs.new-commit == 'true' || startsWith(github.event.head_commit.message, 'FORCE_BUILD=TRUE')
        
    runs-on: ubuntu-latest
    needs: get-latest-commit
    # needs: get-image-names
    strategy:
      matrix:
        # docker-image: ${{ fromJson(needs.get-image-names.outputs.image-list) }}
        docker-image: [php]
      max-parallel: 5
    steps:
      - uses: actions/checkout@v4

      - name: Build JSON
        run: |
          URL=https://raw.githubusercontent.com/docker-library/official-images/master/library/${IMAGE_NAME} node index.js
          cat output.json
          mkdir -p /tmp/json-library
          cp output.json /tmp/json-library/${IMAGE_NAME}
        env:
          IMAGE_NAME: ${{ matrix.docker-image }}

      - name: Upload Image JSON Files
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-json
          path: /tmp/json-library/*
          if-no-files-found: error
          retention-days: 1

  merge-json-output:
    name: Merge JSON output files
    runs-on: ubuntu-latest
    needs: build-json-files
    
    steps:
      - name: Download JSON Files
        uses: actions/download-artifact@v3
        with:
          name: docker-image-json
          path: /tmp/json-library
      
      - name: List Files
        working-directory: /tmp/json-library
        run: ls -l

      # - name: Add latest tag
      #   uses: actions/github-script@v6
      #   if: github.ref != 'refs/tags/latest'
      #   with:
      #     github-token: ${{ secrets.TOKEN_FOR_ACTIONS }}
      #     script: |
      #       await github.rest.git.createRef({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         ref: "refs/tags/latest",
      #         sha: context.sha
      #       })

      # - name: Release Files
      #   uses: ncipollo/release-action@v1
      #   if: github.ref == 'refs/tags/latest'
      #   with:
      #     artifacts: "/tmp/json-library/*"

  store-latest-commit-sha:
    name: Store docker-library commit SHA
    runs-on: ubuntu-latest
    needs: build-json-files

    steps:
      - name: Get latest commit SHA
        id: get-sha
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_ACTIONS }}
          result-encoding: string
          script: |
            const commits = await github.rest.repos.listCommits({
              owner: 'docker-library',
              repo: 'official-images'
            });
            const sha=commits.data[0].sha;

            return sha

      - name: Store SHA in Github Variable
        run: |
          echo docker-library/official-images SHA: ${SHA}
          echo github repository: ${GITHUB_REPOSITORY}
          gh api --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${GITHUB_REPOSITORY}/actions/variables/ \
            -f name='DOCKER_LIBRARY_SHA' \
            -f value='${SHA}'
        env:
          GH_TOKEN: ${{ secrets.TOKEN_FOR_ACTIONS }}
          SHA: ${{ steps.get-sha.outputs.result }}
      
  check-artifact:
    runs-on: ubuntu-latest
    needs: store-latest-commit-sha
    steps:
      - name: Download sha artifact
        id: download-sha-artifact
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: docker-image-commit
          path: /tmp
      
      - name: Get Archived SHA
        if: steps.download-sha-artifact.outcome == 'success'
        id: get-archived-sha
        run: |
          SHA=$(cat /tmp/json-library.sha)
          echo Archived SHA: ${SHA}
          echo "ARCHIVEDSHA=$SHA" >> $GITHUB_OUTPUT
      
      - name: Get latest commit SHA
        id: get-latest-sha
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_ACTIONS }}
          result-encoding: string
          script: |
            const commits = await github.rest.repos.listCommits({
              owner: 'docker-library',
              repo: 'official-images'
            });
            return commits.data[0].sha;
        
      - name: Compare SHAs
        id: compare-sha
        run: |
          echo Archived SHA: ${ARCHIVEDSHA}
          echo Latest SHA:   ${LATESTSHA}
          if [[ $ARCHIVEDSHA == $LATESTSHA ]]; then 
            NEWCOMMIT=true
            
          else
            NEWCOMMIT=false
          fi

          echo "NEWCOMMIT=$NEWCOMMIT" >> $GITHUB_OUTPUT
          echo "NEWCOMMIT=$NEWCOMMIT"
        env:
          ARCHIVEDSHA: ${{ steps.get-archived-sha.outputs.ARCHIVEDSHA }}
          LATESTSHA: ${{ steps.get-latest-sha.outputs.result }}
